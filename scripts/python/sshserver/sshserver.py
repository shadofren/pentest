import socket
import threading
import paramiko
import sys
host_key = paramiko.RSAKey(filename='/home/yuu/.ssh/id_rsa')


class Server(paramiko.ServerInterface):
    def _init_(self):
        self.event = threading.Event()

    def check_channel_request(self, kind, chanid):
        if kind == "session":
            return paramiko.OPEN_SUCCEEDED
        return paramiko.OPEN_FAILED_ADMINISTRATIVELY_PROHIBITED

    def check_auth_password(self, username, password):
        if (username == 'test') and (password == 'test'):
            return paramiko.AUTH_SUCCESSFUL
        return paramiko.AUTH_FAILED


server = sys.argv[1]
ssh_port = int(sys.argv[2])
try:
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    sock.bind((server, ssh_port))
    sock.listen(100)
    print('[+] Listening for connection ...')
    client, addr = sock.accept()
except Exception as e:
    print('[-] Listen failed: ' + str(e))
    sys.exit(1)
print('[+] Got a connection')

try:
    session = paramiko.Transport(client)
    session.add_server_key(host_key)
    server = Server()
    try:
        session.start_server(server=server)
    except paramiko.SSHException as x:
        print('[-] SSH negotiation failed!')
    chan = session.accept(20)
    print('[+] Authenticated')
    print(chan.recv(1024).decode())
    chan.send('Welcome to ssh'.encode())
    while True:
        try:
            command = input("Enter command: ").strip('\n')
            if command != 'exit':
                chan.send(command.encode())
                print(chan.recv(1024).decode())
            else:
                chan.send('exit'.encode())
                print('Exiting')
                session.close()
                raise Exception('exit')
        except KeyboardInterrupt:
            session.close()
except Exception as e:
    print('[-] Caught exception: ' + str(e))
    try:
        session.close()
    except:
        pass
    sys.exit(1)
