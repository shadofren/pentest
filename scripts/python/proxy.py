#!/usr/bin/env python

import sys
import socket
import threading
import argparse


def server_loop(local_host, local_port, remote_host, remote_port, receive_first):
    server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

    try:
        server.bind((local_host, local_port))
    except Exception as e:
        print(f"[!!] Failed to listen on {local_host}:{local_port}")
        print(f"[!!] Exception: {e}")
        sys.exit(0)

    print(f"[*] Listening on {local_host}:{local_port}")

    server.listen(5)

    while True:
        client_socket, addr = server.accept()

        # print out the local connection information
        print(f"[==>] Received incoming connection from {addr}")

        # start a thread to talk to the remote host
        proxy_thread = threading.Thread(target=proxy_handler, args=(
            client_socket, remote_host, remote_port, receive_first))

        proxy_thread.start()


def proxy_handler(client_socket, remote_host, remote_port, receive_first):

    # connect to remote host
    remote_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    remote_socket.connect((remote_host, remote_port))

    # receive data from the remote end if necessary
    if receive_first:
        remote_buffer = receive_from(remote_socket)
        hexdump(remote_buffer)

        # send it to our response handler
        remote_buffer = response_handler(remote_buffer)

        # if we have data to send to our local client, send it
        if len(remote_buffer):
            print(f"[<==] Sending {len(remote_buffer)} bytes to localhost.")
            client_socket.send(remote_buffer.encode())

    # now let's loop and read from local, send to remote, send to local
    while True:
        # read from localhost
        local_buffer = receive_from(client_socket)

        if len(local_buffer):

            print(f"[==>] Received {len(local_buffer)} bytes from localhost.")
            hexdump(local_buffer)

            # send it to our request handler
            local_buffer = request_handler(local_buffer)

            # send off the data to the remote host
            remote_socket.send(local_buffer)
            print(f"[==>] Sent to remote.")

        # receive back the response
        remote_buffer = receive_from(remote_socket)

        if len(remote_buffer):

            print(
                f"[<==] Received {len(remote_buffer)} bytes from remote host.")
            hexdump(remote_buffer)

            # send it to our response handler
            remote_buffer = response_handler(remote_buffer)

            # send off the data to the local host
            client_socket.send(remote_buffer)
            print(f"[<==] Sent to local.")

        # if no more data on either side, close the connections
        if not len(local_buffer) or not len(remote_buffer):
            client_socket.close()
            remote_socket.close()
            print("[*] No more data. Closing connetions.")
            break


def ordp(c):
    output = []

    for i in c:
        if (i < 32) or (i >= 127):
            output.append('.')
        else:
            output.append(chr(i))
    return ''.join(output)


def hexdump(p):
    output = []
    l = len(p)
    i = 0
    while i < l:
        output.append('{:04d}   '.format(i))
        for j in range(32):
            if (i + j) < l:
                byte = p[i + j]
                output.append('{:02X} '.format(byte))
            else:
                output.append('   ')
            if (j % 32) == 7:
                output.append(' ')
        output.append('  ')
        output.append(ordp(p[i:i + 32]))
        output.append('\n')
        i += 32

    print("".join(output))


def receive_from(connection):
    buffer = bytes()

    # We set a 2 second timeout; depending on your target
    # This may need to be adjusted
    connection.settimeout(2)
    try:
        # keep reading into the buffer until there's no more data or we timeout
        while True:
            data = connection.recv(4096)
            if not data:
                break

            buffer += data

    except:
        pass

    return buffer

# modify the requests destined for the remote host


def request_handler(buffer):
    # perform packet modifications
    return buffer


def response_handler(buffer):
    # perform packet modifications
    return buffer


if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "--lhost", help="local host", required=True, type=str)
    parser.add_argument("--lport", help="local port", required=True, type=int)
    parser.add_argument("--rhost", help="remote host", required=True, type=str)
    parser.add_argument("--rport", help="remote port", required=True, type=int)
    parser.add_argument(
        "--receivefirst", help="connect and receive data before sending to the remote host", action='store_true')

    args = parser.parse_args()
    print(args)
    server_loop(args.lhost, args.lport, args.rhost,
                args.rport, args.receivefirst)
